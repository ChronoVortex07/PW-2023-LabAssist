{
  "name": "InvalidArgumentError",
  "message": "Graph execution error:\n\nNo OpKernel was registered to support Op 'CudnnRNNV3' used by {{node cond_41/then/_0/cond/CudnnRNNV3}} with these attrs: [seed=0, dropout=0, T=DT_FLOAT, input_mode=\"linear_input\", direction=\"unidirectional\", rnn_mode=\"gru\", is_training=true, seed2=0, num_proj=0, time_major=false]\nRegistered devices: [CPU, GPU]\nRegistered kernels:\n  <no registered kernels>\n\n\t [[cond_41/then/_0/cond/CudnnRNNV3]]\n\t [[model_1/gru_2/PartitionedCall]] [Op:__inference_train_function_358314]",
  "stack": "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)\nCell \u001b[1;32mIn[15], line 48\u001b[0m\n\u001b[0;32m     43\u001b[0m     \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mTest accuracy: \u001b[39m\u001b[39m{\u001b[39;00m\u001b[39mround\u001b[39m(accuracy\u001b[39m \u001b[39m\u001b[39m*\u001b[39m\u001b[39m \u001b[39m\u001b[39m100\u001b[39m,\u001b[39m \u001b[39m\u001b[39m2\u001b[39m)\u001b[39m}\u001b[39;00m\u001b[39m%\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     45\u001b[0m     \u001b[39mreturn\u001b[39;00m history, seq_model\n\u001b[1;32m---> 48\u001b[0m _, sequence_model \u001b[39m=\u001b[39m run_experiment()\n\nCell \u001b[1;32mIn[15], line 33\u001b[0m, in \u001b[0;36mrun_experiment\u001b[1;34m()\u001b[0m\n\u001b[0;32m     31\u001b[0m seq_model \u001b[39m=\u001b[39m get_sequence_model()\n\u001b[0;32m     32\u001b[0m \u001b[39mwith\u001b[39;00m tf\u001b[39m.\u001b[39mdevice(\u001b[39m\"\u001b[39m\u001b[39m/device:GPU:0\u001b[39m\u001b[39m\"\u001b[39m):\n\u001b[1;32m---> 33\u001b[0m     history \u001b[39m=\u001b[39m seq_model\u001b[39m.\u001b[39;49mfit(\n\u001b[0;32m     34\u001b[0m         [train_data[\u001b[39m0\u001b[39;49m], train_data[\u001b[39m1\u001b[39;49m]],\n\u001b[0;32m     35\u001b[0m         train_labels,\n\u001b[0;32m     36\u001b[0m         validation_split\u001b[39m=\u001b[39;49m\u001b[39m0.3\u001b[39;49m,\n\u001b[0;32m     37\u001b[0m         epochs\u001b[39m=\u001b[39;49mEPOCHS,\n\u001b[0;32m     38\u001b[0m         \u001b[39m# callbacks=[checkpoint],\u001b[39;49;00m\n\u001b[0;32m     39\u001b[0m     )\n\u001b[0;32m     41\u001b[0m seq_model\u001b[39m.\u001b[39mload_weights(filepath)\n\u001b[0;32m     42\u001b[0m _, accuracy \u001b[39m=\u001b[39m seq_model\u001b[39m.\u001b[39mevaluate([test_data[\u001b[39m0\u001b[39m], test_data[\u001b[39m1\u001b[39m]], test_labels)\n\nFile \u001b[1;32mc:\\Users\\zedon\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras\\utils\\traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     67\u001b[0m     filtered_tb \u001b[39m=\u001b[39m _process_traceback_frames(e\u001b[39m.\u001b[39m__traceback__)\n\u001b[0;32m     68\u001b[0m     \u001b[39m# To get the full stack trace, call:\u001b[39;00m\n\u001b[0;32m     69\u001b[0m     \u001b[39m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[1;32m---> 70\u001b[0m     \u001b[39mraise\u001b[39;00m e\u001b[39m.\u001b[39mwith_traceback(filtered_tb) \u001b[39mfrom\u001b[39;00m \u001b[39mNone\u001b[39;00m\n\u001b[0;32m     71\u001b[0m \u001b[39mfinally\u001b[39;00m:\n\u001b[0;32m     72\u001b[0m     \u001b[39mdel\u001b[39;00m filtered_tb\n\nFile \u001b[1;32mc:\\Users\\zedon\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\tensorflow\\python\\eager\\execute.py:54\u001b[0m, in \u001b[0;36mquick_execute\u001b[1;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[0;32m     52\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[0;32m     53\u001b[0m   ctx\u001b[39m.\u001b[39mensure_initialized()\n\u001b[1;32m---> 54\u001b[0m   tensors \u001b[39m=\u001b[39m pywrap_tfe\u001b[39m.\u001b[39mTFE_Py_Execute(ctx\u001b[39m.\u001b[39m_handle, device_name, op_name,\n\u001b[0;32m     55\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[0;32m     56\u001b[0m \u001b[39mexcept\u001b[39;00m core\u001b[39m.\u001b[39m_NotOkStatusException \u001b[39mas\u001b[39;00m e:\n\u001b[0;32m     57\u001b[0m   \u001b[39mif\u001b[39;00m name \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\n\u001b[1;31mInvalidArgumentError\u001b[0m: Graph execution error:\n\nNo OpKernel was registered to support Op 'CudnnRNNV3' used by {{node cond_41/then/_0/cond/CudnnRNNV3}} with these attrs: [seed=0, dropout=0, T=DT_FLOAT, input_mode=\"linear_input\", direction=\"unidirectional\", rnn_mode=\"gru\", is_training=true, seed2=0, num_proj=0, time_major=false]\nRegistered devices: [CPU, GPU]\nRegistered kernels:\n  <no registered kernels>\n\n\t [[cond_41/then/_0/cond/CudnnRNNV3]]\n\t [[model_1/gru_2/PartitionedCall]] [Op:__inference_train_function_358314]"
}
